{"name":"Insulatejs","tagline":"Library to create constants in and mutable objects, members and methods in javascript","body":"insulatejs\r\n==========\r\n\r\nLibrary to create constants in and mutable objects, members and methods in javascript\r\n\r\n\tinsulate.js v0.1\r\n\tcreated by Alex Becker\r\n\tbyaxy@insulatejs.com\r\n\tinsulate.js is a library to create indestructible and unchangeable objects, members and methods in ecma5 javascript (all modern browsers and ie9 and up).\r\n\tBy running insulate.createObject() you can create an object in global namespace that can not be reset, redefined or in anyway messed with.\r\n\tFurther, you can add members and methods  with insulate.createMember() and insulate.createMethod() that will not be vulnerable to any unwanted\tchanges\r\n\tinitiated by other scripts. By keeping your important functions immutable you can improve security\r\n\tInfact, after you created an object with insulate and used insulate to add methods and members, they will all behave as constants, imitable!\r\n\tEvery thing that you create with insulate can not be redefined!\r\n\tInsulate itself is created to be imitable by using it's createObject method. It can not be redefined. Try it.\r\n\r\nTo use, include this script in your page.\r\n\r\nTo create a global constant:\r\n\r\n\tinsulate.createConstant() will create a constant in a global namespace. Needs a name and optional data to set the constant\r\n\t\r\n\texample \r\n\tinsulate.createConstant(\"MYCONST\", \"hello world\")\r\n\tIf you choose not to pass the second argument, you can set the constant later.\r\n\texample\r\n\tinsulate.createConstant(\"MYCONST\"); MYCONST = \"hello world\".\r\n\r\nTo create imuttable objects:\r\n\t\r\n\tinsulate.createObject() will create an object in global space or in any context if supplied\r\n\tneeds a name and optianoly context (an object). All members and methods of this the top level object will be immutable, as long as you create eaxh of them with insulate lybrary. \r\n\tNested objects can be passed with dotted notaition - obj1.obj2.obj3 or as a named refference.\r\n\r\n\texample \r\n\tinsulate.createObject(\"myObj\"); will create myObj in global namespace. This should be used as a starting point. \r\n\tCreating nested objects with insulate library will insure imutabylity\r\n\tinsulate.createObject(\"myObjInner\", myObj) will create a myObjInner object as a myObj member. Can also be done with insulate.createMember.\r\n\t\r\nTo create imuttable members:\r\n\tinsulate.createMethod() will create a immutable  method (if created in an object made with insulate utility) \r\n\tneeds a name, object and an optional function.\r\n\tnested objects can be passed with dotted notaition - obj1.obj2.obj3 or as a named refference\r\n\r\n\t\r\n\texample\r\n\tinsulate.createObject(\"myObj\"); \r\n\tinsulate.createMethod(\"hello\", myObj, function(){console.log(\"hello world\")})\r\n\t\r\n\tIf you choose not to pass a function as the third argument, you can set the method later\r\n\r\n\texample\r\n\tinsulate.createObject(\"myObj\"); \r\n\tinsulate.createMethod(\"hello\", myObj);\r\n\tmyObj.hello = function(){console.log(\"hello world\")}\t\r\n\r\n\tinsulate.createMember() will create an imutable member in an object (created with insulate)\r\n\tneeds a name, object and optinal data of any type. \r\n\tnested objects can be passed with dotted notaition - obj1.obj2.obj3 or as a named refference\r\n\r\n\texample \r\n\tinsulate.createObject(\"myObj\");\r\n\tinsulate.createMember(\"lirics\", myObj, \"lorem ipsum something, something\");\r\n\r\n\tif you choose not to pass any data as  the third argument, you can set the member later\r\n\r\n\texample\r\n\tinsulate.createObject(\"myObj\");\r\n\tinsulate.createMember(\"lirics\", myObj);\r\n\tmyObj.lirics = \"lorem ipsum something, something\";\r\n","google":"UA-55363610-1","note":"Don't delete this file! It's used internally to help with page regeneration."}