{"name":"Insulatejs","tagline":"Library to create constants in and immutable objects, members and methods in javascript","body":"# insulatejs\r\n==========\r\n\r\n>Library to create constants, immutable objects, members and methods in javascript    \r\n\r\n### insulatejs v0.1   \r\n\r\ncreated by Alex Becker\r\nbyaxy@insulatejs.com    \r\n \r\n_also available on bower._ `bower install insulatejs`   \r\n  \r\ninsulate.js is a library to create indestructible and unchangeable objects, members and methods in ecma5 javascript (all modern browsers and ie9 and up).  \r\n\r\nBy running `insulate.createObject()` you can create an object in global namespace that can not be reset, redefined or in anyway messed with.  \r\n\r\nFurther, you can add members and methods  with `insulate.createMember()` and `insulate.createMethod()` that will not be vulnerable to any unwanted changes initiated by other scripts. By keeping your important functions immutable you can improve security   \r\nIn fact, after you created an object with insulate and used insulate to add methods and members, they will all behave as constants, imitable!\r\nEvery thing that you create with insulate can not be redefined!\r\nInsulate itself is created to be imitable by using it's `createObject()` method. It can not be redefined. Try it.\r\n\r\n\r\nTo use, include this script in your page.   \r\nTo turn on error messages in console, use `insulate.logErrors();`, highly recommended to do so, when using for a first time.   \r\nTo turn  error messages  back off, `insulate.muteErrors();`\r\n\r\nTo create a global constant:   \r\n`insulate.createConstant()` will create a constant in a global namespace. Needs a name and optional value to set the constant   \r\n\r\n    example  \r\n    insulate.createConstant(\"MYCONST\", \"hello world\");   \r\n\r\nIf you choose not to pass the second argument, you can set the constant later.   \r\n\r\n    example\r\n    insulate.createConstant(\"MYCONST\"); MYCONST = \"hello world\";   \r\n    Now MYCONST will always return \"hello world\".  \r\n    Try to rest it  \r\n    MYCONST = 123;\r\n    console.log(MYCONST); //will print out \"hello world\"!    \r\n\r\n\t\r\nIt is important not to declare your constants before you create them with insulate, if you do, before ruining `insulate.createConstant()`, insulate will ask you to pick a different name!\r\n\t\r\nTo create a constant in another scope, other than  global, use `insulate.createMember();`  \r\n  \r\nTo create immutable objects:\r\n\t\r\n`insulate.createObject();` will create an object in global space or in any context, if supplied.  \r\nNeeds a name and optionally context (an object).    \r\nAll members and methods of this the top level object will be immutable, as long as you create  \r\neach of them with insulate library.  \r\nNested objects can be passed with dotted notation - obj1.obj2.obj3 or as a named reference.  \r\n\r\n    example \r\n    insulate.createObject(\"myObj\"); will create myObj in global namespace.   \r\n    This should be used as a starting point. \r\n    Creating nested objects with insulate library will insure immutability.   \r\n    insulate.createObject(\"myObjInner\", myObj); will create a myObjInner object    \r\n    as a myObj member. Can also be done with insulate.createMember();.  \r\n    Now try to reset either one:   \r\n    myObj = \"I am trying to hack you\";   \r\n    console.log(myObj); //will  print out an object!   \r\n    myObj.myObjInner = \"I am trying to hack you\";   \r\n    console.log(myObj.myObjInner); //will still print out your object!  \r\n    \r\n\t\r\nTo create immutable methods:\r\n\r\n`insulate.createMethod()` will create a immutable  method (if created in an object made with insulate utility) \r\nneeds a name, object and an optional function.    \r\nNested objects can be passed with dotted notation - obj1.obj2.obj3 or as a named reference   \r\n\r\n    example\r\n    insulate.createObject(\"myObj\"); // in case you have not created it before.\r\n    insulate.createMethod(\"hello\", myObj, function(){console.log(\"\")});  \r\n    Let's try to reset it:  \r\n    myObj.hello = function(){console.log(\"i'm trying to hack you\")};  \r\n    myObj.hello(); // will still print out \"hello world\"!\r\n\r\nIf you choose not to pass a function as the third argument, you can set the method later.   \r\n\r\n    example\r\n    insulate.createObject(\"myObj\"); // in case you have not created it before.\r\n    insulate.createMethod(\"hello\", myObj);\r\n    myObj.hello = function(){console.log(\"hello world\")};   \r\n    Let's try to reset it:  \r\n    myObj.hello = function(){console.log(\"i'm trying to hack you\")};  \r\n    myObj.hello(); // will still print out \"hello world\"!\r\n\t\r\nTo create immutable members:\r\n\r\n`insulate.createMember()` will create an imitable member in an object (created with insulate).   \r\nNeeds a name, object and optional value.   \r\nNested objects can be passed with dotted notaition - obj1.obj2.obj3 or as a named reference\r\n\r\n    example \r\n    insulate.createObject(\"myObj\"); // in case you have not created it before.\r\n    insulate.createMember(\"lirics\", myObj, \"lorem ipsum something, something\");   \r\n    Let's try to reset it:  \r\n    myObj.lirics = \"i'm trying to hack you\";  \r\n    console.log(myObj.lirics); // will still print out lorem ipsum something, something\"!\r\n\r\n\r\n\r\nif you choose not to pass any value as  the third argument, you can set the member later  \r\n\r\n    example\r\n    insulate.createObject(\"myObj\");\r\n    insulate.createMember(\"lirics\", myObj);\r\n    myObj.lirics = \"lorem ipsum something, something\";  \r\n    Let's try to reset it:  \r\n    myObj.lirics = \"i'm trying to hack you\";  \r\n    console.log(myObj.lirics); // will still print out lorem ipsum something, something\"!\r\n","google":"UA-55363610-1","note":"Don't delete this file! It's used internally to help with page regeneration."}